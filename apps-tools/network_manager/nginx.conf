        location /check_inet {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/online.lua;
        }

###############################################################################
# eth0
###############################################################################

        location /get_eth0_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua '
                local f = io.popen("ip addr list eth0") 
                local content = f:read("*all") 
                f:close() 
                ngx.say(content) 
            ';
        }

        location /set_eth0_dhcp {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua '
                local network = ""
                network.."[Match]\n"
                network.."Name=eth0\n"
                network.."[Network]\n"
                network.."LinkLocalAddressing=yes\n"
                network.."DHCP=yes\n"
                network.."IPForward=yes\n"
                network.."IPMasquerade=yes\n"

                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
            ';
        }

        location /set_eth0_manual {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local ipaddr  = args.ipaddr  or 0
                local netmask = args.netmask or 0
                local gateway = args.gateway or 0
                local brdaddr = args.brdaddr or 0

                local network = ""
                network.."[Match]\n"
                network.."Name=eth0\n"
                network.."[Network]\n"
                network.."Address="..ipaddr.."/"..netmask.."\n"
                network.."Gateway="..gateway.."\n"
                network.."IPForward=yes\n"
                network.."IPMasquerade=yes\n"
                network.."[Network]\n"
                network.."Broadcast="..brdaddr.."\n"

                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
            ';
        }

        location /set_eth0 {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local address   = args.address   or 0
                local dhcp      = args.dhcp      or 0
                local gateway   = args.gateway   or 0
                local broadcast = args.broadcast or 0
                local dns       = args.dns       or 0

                local network = ""
                network.."[Match]\n"
                network.."Name=eth0\n"
                network.."[Network]\n"
                network.."LinkLocalAddressing=yes\n"
                network.."DHCP="..dhcp.."\n"
                if address then
                network.."Address="..address.."\n"
                end
                if gateway then
                network.."Gateway="..gateway.."\n"
                end
                if dns then
                network.."DNS="..dns.."\n"
                end
                network.."IPForward=yes\n"
                network.."IPMasquerade=yes\n"
                network.."[Network]\n"
                if broadcast then
                network.."Broadcast="..brdaddr.."\n"
                end

                local network = ""
                network.."[Match]\n"
                network.."Name=eth0\n"
                network.."[Network]\n"
                network.."LinkLocalAddressing=yes\n"
                network.."IPForward=yes\n"
                network.."IPMasquerade=yes\n"

                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
            ';
        }
###############################################################################
# wlan0 client
###############################################################################

        location /check_dongle {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local fh = io.popen("ip addr show wlan0wext")
                local line = fh:read("*all")
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("link") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /get_wnet_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("iwlist wlan0wext scan")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /connect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args     = ngx.req.get_uri_args()
                local essid    = args.essid    or 0
                local password = args.password or 0
                os.execute("rw")
                os.execute("wpa_passphrase "..essid.." "..password.." > /opt/redpitaya/wpa_supplicant.conf")
                os.execute("ro")
                os.execute("systemctl restart wpa_supplicant_wext@wlan0wext.service")
            ';
        }

        location /get_connected_wlan {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("iwconfig wlan0wext | grep ESSID")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /disconnect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("systemctl stop wpa_supplicant_wext@wlan0wext.service")
                os.execute("rm -f /opt/redpitaya/wpa_supplicant.conf")
                ngx.say("OK")
            ';
        }

###############################################################################
# wlan0 access point
###############################################################################

        location /wifi_create_point {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()

                os.execute("rm -f /opt/redpitaya/wpa_supplicant.conf")

                local hostapd = ""
                hostapd.."interface=wlan0wext\n"
                hostapd.."ssid="..args.essid.."\n"
                hostapd.."driver=rtl871xdrv\n"
                hostapd.."hw_mode=g\n"
                hostapd.."channel=6\n"
                hostapd.."macaddr_acl=0\n"
                hostapd.."auth_algs=1\n"
                hostapd.."ignore_broadcast_ssid=0\n"
                hostapd.."wpa=2\n"
                hostapd.."wpa_passphrase="..args.password.."\n"
                hostapd.."wpa_key_mgmt=WPA-PSK\n"
                hostapd.."wpa_pairwise=TKIP\n"
                hostapd.."rsn_pairwise=CCMP\n"

                local f = io.open("/opt/redpitaya/hostapd.conf", "w")
                f:write(hostapd)
                f:close()

                os.execute("systemctl restart hostapd@wlan0wext.service")
            ';
        }

        location /remove_ap {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("systemctl stop hostapd@wlan0wext.service")
                os.execute("rm -f /opt/redpitaya/hostapd.conf")
            ';
        }

        location /get_ap_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local fh = io.popen("iwconfig wlan0wext")
                local line = fh:read("*all")
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("Mode:Master") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /ap_mode {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("rw && rm -fr /opt/redpitaya/wpa_supplicant.conf")
                os.execute("reboot")
                ngx.say("OK")
            ';
        }
