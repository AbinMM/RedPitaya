        location /check_wireless {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwlist -v 2>1 | grep version > /tmp/iwlist.check")

                fh,err = io.open("/tmp/iwlist.check")
                line = fh:read()
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("version") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /check_dongle {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("ip addr show wlan0wext > /tmp/dongle.check")

                fh,err = io.open("/tmp/dongle.check", "r")
                line = fh:read("*all")
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("link") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /connect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local essid = args.essid or 0
                local password = args.password or 0
                os.execute("systemctl stop hostapd@wlan0wext.service")
                os.execute("rm -f /opt/redpitaya/hostapd.conf")
                os.execute("/opt/redpitaya/www/apps/network_manager/generate_supplicant.sh "..essid.." "..password)
            ';
        }

        location /wifi_create_point {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/create_wifi_point.lua;
        }

        location /check_inet {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/online.lua;
        }

        location /get_wnet_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwlist wlan0wext scan > /tmp/wlan.list")
                local f = io.open("/tmp/wlan.list", "r")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_eth0_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/eth0_status.lua;
        }

        location /set_eth0_dhcp {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/eth0_do_dhcp.lua;
        }

        location /set_eth0_manual {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/eth0_do_manual.lua;
        }

        location /get_connected_wlan {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwconfig wlan0wext | grep ESSID > /tmp/wlan.current")
                local f = io.open("/tmp/wlan.current", "r")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /remove_ap {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("rm -f /opt/redpitaya/hostapd.conf")
                os.execute("systemctl stop hostapd@wlan0wext.service")
            ';
        }

        location /get_ap_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwconfig wlan0wext > /tmp/wlan.modestatus")
                
                fh,err = io.open("/tmp/wlan.modestatus", "r")
                line = fh:read("*all")
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("Mode:Master") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /disconnect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("systemctl stop wpa_supplicant_wext@wlan0wext.service")
                os.execute("rm -f /opt/redpitaya/wpa_supplicant.conf")
                ngx.say("OK")
            ';
        }

        location /ap_mode {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("rw && rm -fr /opt/redpitaya/wpa_supplicant.conf")
                os.execute("reboot")
                ngx.say("OK")
            ';
        }
