
user  root;
worker_processes  1;

env PATH;
env PATH_REDPITAYA;

error_log  /var/log/redpitaya_nginx/error.log;
error_log  /var/log/redpitaya_nginx/debug.log  info;

pid        /var/run/redpitaya_nginx.pid;

daemon on;

events {
    worker_connections  1024;
}

# worker_rlimit_core 500M;

http {
    include       mime.types;
    default_type  application/octet-stream;

    init_by_lua 'cjson = require "cjson"';
    lua_shared_dict rp_params 10m;

    access_log /dev/null;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream websocket {
        server localhost:9002;
    }

    proxy_temp_path /tmp/proxy 1 2;

    server {
        listen       80;
        expires off;

        keepalive_timeout 0;

        access_log /dev/null;

        #gzip on;
        #gzip_http_version 1.0;
        #gzip_vary on;
        #gzip_comp_level 6;
        #gzip_proxied any;
        #gzip_types application/json;
        #gzip_buffers 16 8k;
        #gzip_buffers 128 4k;
        #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        root /opt/redpitaya/www/apps;

        location ~ ^/tmp {
            root /;
        }

        location ~ ^/log {
      	    root /var/;
      	}

        location ~ \.css {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/css;
            add_header  Content-Type    text/css;
        }

        location ~ \.js {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/x-javascript;
            add_header  Content-Type    application/x-javascript;
        }

        client_body_buffer_size 1M;
        client_body_temp_path /tmp;
        rp_bazaar_dir     /opt/redpitaya/www/apps;
        rp_bazaar_server  http://bazaar.redpitaya.com;
        rp_tmp_dir        /tmp;

        location /bazaar {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

                 rp_module_cmd;
        }

        location /wss {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /data {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

                 rp_module_cmd;
        }

        location /upload_gen_ch1 {
             add_header 'Access-Control-Allow-Origin' '*';
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             add_header 'Content-type' 'text/plain; charset=utf-8';

             content_by_lua '
                if ngx.req.get_method() == "POST" then
                   local file = io.open("/tmp/gen_ch1.csv", "w");
                   ngx.req.read_body();
                   io.output(file):write(ngx.var.request_body);
                   io.flush(file);
                   io.close(file);
                   ngx.say("OK");
                else
                   ngx.say("ERROR: Unsupported request method");
                end
             ';
        }

        location /upload_gen_ch2 {
             add_header 'Access-Control-Allow-Origin' '*';
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             add_header 'Content-type' 'text/plain; charset=utf-8';

             content_by_lua '
                if ngx.req.get_method() == "POST" then
                   local file = io.open("/tmp/gen_ch2.csv", "w");
                   ngx.req.read_body();
                   io.output(file):write(ngx.var.request_body);
                   io.flush(file);
                   io.close(file);
                   ngx.say("OK");
                else
                   ngx.say("ERROR: Unsupported request method");
                end
             ';
        }


        location /start_supplicant {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("wpa_supplicant -B -D wext -i wlan0 -c /opt/redpitaya/www/apps/wifi_wizard/wpa_supplicant.conf & disown")
                ngx.say("OK")
            ';
        }

        location /redpitaya {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '
                data1 = {}
                for i=1, 65536 do
            data1[i] = 0.111 * i
                end
                res = ngx.location.capture("/hello");
                ngx.log(ngx.ERR, res.truncated)
                json_text = cjson.encode(data1)
                ngx.say(json_text)
            ';
        }

        location /apply_key {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

			#content_by_lua '
			#	res = ngx.location.capture(
			#			"http://192.168.1.12:82/html/post_rec.php"
			#		)
			#	ngx.say(res.body)
			#';
        }

        location /redpitaya/action {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '
                data = {}
                data.status = 1
                json_text = cjson.encode(data)
                ngx.say(json_text)
            ';
        }

        location /update_download {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local ecosystem = args.ecosystem or 0
                ngx.say(ecosystem)

                local handle = io.popen("bash /opt/redpitaya/www/apps/updater/download.sh "..ecosystem.." &")
                local res = handle:read("*a")
                handle:close()

                ngx.say(res)
            ';
        }

        location /update_check {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local handle = io.popen("bash /opt/redpitaya/www/apps/updater/check.sh")
                local res = handle:read("*a")
                handle:close()

                ngx.say(res)
            ';
        }

        location /update_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local handle = io.popen("bash /opt/redpitaya/www/apps/updater/list.sh")
                local res = handle:read("*a")
                handle:close()

                ngx.say(res)
            ';
        }

        location /update_extract {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local handle = io.popen("bash /opt/redpitaya/www/apps/updater/extract.sh")
                local res = handle:read("*a")
                handle:close()

                ngx.say(res)
            ';
        }

        location /update_ecosystem {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("/bin/cp -f /opt/redpitaya/www/apps/updater/daemon /tmp && /tmp/daemon")
                ngx.say("OK")
            ';
        }

        location /get_info {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.open("/opt/redpitaya/www/apps/info/info.json", "r")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /redpitaya/data {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '

                local rp_params = ngx.shared.rp_params;
                if not rp_params:get("Floats") then
                    rp_params:set("Floats", "[-1000000, 1000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
                end

                params = cjson.decode(rp_params:get("Floats"));

                datasets = {};
                datasets.g1 = {{}, {}};
                datasets.params = params;

                datasets.g1[1].data = {};
                datasets.g1[2].data = {};

                math.randomseed(os.time());
                for i=1, 2048 do
                    datasets.g1[1].data[i] = {};
                    datasets.g1[2].data[i] = {};
                    datasets.g1[1].data[i][1] = i;
                    datasets.g1[2].data[i][1] = i;
                    datasets.g1[1].data[i][2] = math.random(9000, 10000)/1000.0*math.sin(10.0/2048*i + 0.5);
                    datasets.g1[2].data[i][2] = math.random(4500, 5500)/1000.0*math.sin(10.0/2048*i - 1);
                end;
                result = {};
                result.datasets = datasets;
                json_text = cjson.encode(result);

                if ngx.req.get_method() == "GET" then
                    ngx.say(json_text);
                elseif ngx.req.get_method() == "POST" then
                    ngx.req.read_body();
                    body_table = cjson.decode(ngx.var.request_body);
                    if body_table and body_table.datasets and body_table.datasets.params then
                        rp_params:set("Floats", cjson.encode(body_table.datasets.params));
                        datasets.params = body_table.datasets.params;
                        ngx.say(cjson.encode(body_table));
                    else
                        ngx.say(cjson.encode({"ERROR - wrong POST format"}));
                    end;
                else
                    ngx.say(cjson.encode({"ERROR"}));
                end;
            ';
        }

        location /check_wireless {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwlist -v 2>1 | grep version > /tmp/iwlist.check")

                fh,err = io.open("/tmp/iwlist.check")
                line = fh:read()
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("version") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /check_dongle {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("ifconfig 2>1 | grep wlan > /tmp/dongle.check")

                fh,err = io.open("/tmp/dongle.check")
                line = fh:read()
                if line == nil then
                    ngx.say("Fail")
                else
                    if line:find("HWaddr") ~= nil then
                        ngx.say("OK")
                    else
                        ngx.say("Fail")
                    end
                end
                fh:close()
            ';
        }

        location /install_wireless {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("apt-get install -y wireless-tools")
                ngx.say("OK");
            ';
        }

        location /connect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local essid = args.essid or 0
                local password = args.password or 0
                os.execute("/opt/redpitaya/www/apps/wifi_wizard/generate_supplicant.sh "..essid.." "..password)
            ';
        }


        location /get_ip_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local args = ngx.req.get_uri_args()
                local essid = args.essid or 0
                local password = args.password or 0
                os.execute("/opt/redpitaya/www/apps/wifi_wizard/generate_supplicant.sh "..essid.." "..password)
            ';
        }

        location /check_inet {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("rm -fr /tmp/online.txt")
                os.execute("wget http://redpitaya.com/robots.txt -O /tmp/online.txt 2> /dev/null")

                fh,err = io.open("/tmp/online.txt", "r")
                if not fh then
                    ngx.status = 404
                    fh:close()
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                line = fh:read()
                if line == nil then
                    ngx.status = 404
                    fh:close()
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                else
                    if line:find("agent") ~= nil then
                        line2 = fh:read()
                        if line2 ~= nil and line2:find("Disallow") ~= nil then
                            ngx.say("OK")
                        else
                            ngx.status = 404
                            fh:close()
                            return ngx.exit(ngx.HTTP_NOT_FOUND)
                        end
                    else
                        ngx.status = 404
                        fh:close()
                        return ngx.exit(ngx.HTTP_NOT_FOUND)
                    end
                end
            ';
        }

        location /get_wnet_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwlist wlan0 scan > /tmp/wlan.list")
                local f = io.open("/tmp/wlan.list", "r")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_connected_wlan {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("iwconfig wlan0 | grep ESSID > /tmp/wlan.current")
                local f = io.open("/tmp/wlan.current", "r")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /disconnect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("killall wpa_supplicant")
                ngx.say("OK")
            ';
        }

        location /ap_mode {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("rw && rm -fr /opt/redpitaya/wpa_supplicant.conf")
                os.execute("reboot")
                ngx.say("OK")
            ';
        }

        location /lic_upload {
             content_by_lua '
				local hex_to_char = function(x)
				  return string.char(tonumber(x, 16))
				end

				local unescape = function(url)
				  return url:gsub("%%(%x%x)", hex_to_char):gsub("%+", " ")
				end

                if ngx.req.get_method() == "POST" then
                   ngx.req.read_body();


				   local fname = unescape(ngx.var.request_body):find("lic.lic");
                   local start = unescape(ngx.var.request_body):find("{");
                   local stop  = unescape(ngx.var.request_body):find("]\\n}\\r\\n");

                   if fname ~= nil and start ~= nil and stop ~= nil then

                       local file = io.open("/tmp/lic.lic", "w");
                       io.output(file):write(unescape(ngx.var.request_body):sub(start,stop + 2));
                       io.flush(file);
                       io.close(file);

                       local zfile = io.open("/tmp/zlog.txt", "w");

					   io.output(zfile):write(unescape(ngx.var.request_body):sub(start,stop + 2));
					   io.flush(zfile);
					   io.close(zfile);

					   os.execute("bazaar lic 0");

						ngx.header["Access-Control-Allow-Origin"]= "*";
						ngx.header["Access-Control-Allow-Credentials"]= "true";
						ngx.header["Access-Control-Allow-Methods"]= "GET, POST, OPTIONS";
						ngx.header["Access-Control-Allow-Headers"]= "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
						ngx.header["Content-type"]= "text/html; charset=utf-8";
						ngx.say("OK")
                   else
						ngx.header["Access-Control-Allow-Origin"]= "*";
						ngx.header["Access-Control-Allow-Credentials"]= "true";
						ngx.header["Access-Control-Allow-Methods"]= "GET, POST, OPTIONS";
						ngx.header["Access-Control-Allow-Headers"]= "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
						ngx.header["Content-type"]= "text/html; charset=utf-8";
						ngx.say("Fail_1")
                   end;
                else
                   ngx.say("Fail_2")
                end
             ';
        }

        location /redpitaya/data/decimated {
            add_header 'Access-Control-Allow-Or igin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '

                local client_resolution = 1024

                local res = ngx.location.capture("/redpitaya/data");
                body_table = cjson.decode(res.body);
                params = body_table.datasets.params;
                if params[11] and params[12] and params[11] > 0 and params[12] > 0 then
                    local ch1 = body_table.datasets.g1[1].data;
                    local ch2 = body_table.datasets.g1[2].data;

                    local i=1;
                    while i <= #ch1 do
                        if params[11] < ch1[i][1] and params[12] > ch1[i][1] then
                            i = i + 1
                        else
                            table.remove(ch1, i);
                            table.remove(ch2, i);
                        end
                    end

                    local m = math.floor(#ch1 / client_resolution + 0.5)

                    i=1;
                    local j = m;
                    while i <= #ch1 do
                        if j == m then
                            i = i + 1;
                        else
                            table.remove(ch1, i);
                            table.remove(ch2, i);
                        end
                        j = j - 1;
                        if j == 0 then j = m end
                    end

                    ngx.say(cjson.encode(body_table));
                else
                    ngx.say(cjson.encode(body_table));
                end;

            ';
        }
    }
}
